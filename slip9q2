#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 10

// Function to print the subset
void printSubset(int subset[], int size) {
    printf("{ ");
    for (int i = 0; i < size; i++)
        printf("%d ", subset[i]);
    printf("}\n");
}

// Function to find all subsets with the given sum using backtracking
void findSubsetSum(int set[], int subset[], int n, int subsetSize, int sum, int currentSum, int index) {
    // If currentSum is equal to sum, print the subset
    if (currentSum == sum) {
        printSubset(subset, subsetSize);
        // Exclude the current element and try for other elements
        findSubsetSum(set, subset, n, subsetSize - 1, sum, currentSum - set[index], index + 1);
        return;
    }

    // Iterate through the set and try adding elements to the subset
    for (int i = index; i < n; i++) {
        // Include the current element in the subset if it doesn't exceed the sum
        if (currentSum + set[i] <= sum) {
            subset[subsetSize] = set[i];
            // Recur with the next element and updated currentSum and subsetSize
            findSubsetSum(set, subset, n, subsetSize + 1, sum, currentSum + set[i], i + 1);
        }
    }
}

// Function to find all subsets with the given sum
void subsetSum(int set[], int n, int sum) {
    int subset[MAX_SIZE]; // Array to store the subset
    findSubsetSum(set, subset, n, 0, sum, 0, 0);
}

int main() {
    int set[] = {10, 7, 5, 18, 12, 20, 15};
    int n = sizeof(set) / sizeof(set[0]);
    int sum = 35;

    printf("Subsets with sum %d are:\n", sum);
    subsetSum(set, n, sum);

    return 0;
}
