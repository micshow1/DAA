#include <stdio.h>
#include <limits.h>

// A utility function to get sum of array elements freq[i] to freq[j]
int sum(int freq[], int i, int j) {
    int s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}

// A utility function to find minimum of two values
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to construct optimal BST from keys and their frequencies
int optimalBST(int keys[], int freq[], int n) {
    // Create an auxiliary 2D table to store results of subproblems
    int cost[n][n];

    // For a single key, cost is equal to frequency of the key
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];

    // Consider chains of increasing length starting from 2 to n
    for (int L = 2; L <= n; L++) {
        // i is row number in cost[][]
        for (int i = 0; i <= n - L + 1; i++) {
            // Get column number j from row number i and chain length L
            int j = i + L - 1;
            cost[i][j] = INT_MAX;

            // Try making all keys in interval keys[i..j] as root
            for (int r = i; r <= j; r++) {
                // c = cost when keys[r] becomes root of this subtree
                int c = ((r > i) ? cost[i][r - 1] : 0) +
                        ((r < j) ? cost[r + 1][j] : 0) +
                        sum(freq, i, j);
                if (c < cost[i][j])
                    cost[i][j] = c;
            }
        }
    }
    return cost[0][n - 1];
}

// Function to calculate the best-case complexity of Optimal Binary Search Tree
int bestCaseComplexity(int freq[], int n) {
    // Best-case complexity occurs when the keys are already in sorted order
    // In this case, the time complexity of constructing OBST is O(n^2)
    return n * n;
}

int main() {
    int keys[] = {10, 12, 20};
    int freq[] = {34, 8, 50};
    int n = sizeof(keys) / sizeof(keys[0]);

    printf("Cost of Optimal BST is %d\n", optimalBST(keys, freq, n));
    printf("Best-case complexity: O(%d)\n", bestCaseComplexity(freq, n));

    return 0;
}
