#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 100

// Structure to represent a graph
struct Graph {
    int numVertices;
    int** adjacencyMatrix;
    bool* visited;
};

// Function to create a new graph
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

    // Allocate memory for the adjacency matrix
    graph->adjacencyMatrix = (int**)malloc(numVertices * sizeof(int*));
    for (int i = 0; i < numVertices; i++) {
        graph->adjacencyMatrix[i] = (int*)malloc(numVertices * sizeof(int));
        for (int j = 0; j < numVertices; j++)
            graph->adjacencyMatrix[i][j] = 0;
    }

    // Initialize visited array
    graph->visited = (bool*)malloc(numVertices * sizeof(bool));
    for (int i = 0; i < numVertices; i++)
        graph->visited[i] = false;

    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest) {
    graph->adjacencyMatrix[src][dest] = 1;
    graph->adjacencyMatrix[dest][src] = 1; // For undirected graph
}

// Function to perform Breadth First Search traversal
void BFS(struct Graph* graph, int startVertex) {
    // Create a queue for BFS
    int queue[MAX_VERTICES], front = 0, rear = 0;

    // Mark the current node as visited and enqueue it
    graph->visited[startVertex] = true;
    queue[rear++] = startVertex;

    while (front != rear) {
        // Dequeue a vertex from queue and print it
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        // Get all adjacent vertices of the dequeued vertex currentVertex. If an adjacent vertex has not been visited, then mark it visited and enqueue it
        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjacencyMatrix[currentVertex][i] == 1 && !graph->visited[i]) {
                graph->visited[i] = true;
                queue[rear++] = i;
            }
        }
    }
}

int main() {
    struct Graph* graph = createGraph(5); // Create a graph with 5 vertices

    // Add edges
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("BFS traversal starting from vertex 0: ");
    BFS(graph, 0);
    printf("\n");

    return 0;
}
