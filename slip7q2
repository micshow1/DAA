#include<stdio.h>
#include<stdlib.h>

#define MAX_VERTICES 100

// Structure to represent a node in the graph
struct Node {
    int vertex;
    struct Node* next;
};

// Structure to represent a graph
struct Graph {
    int numVertices;
    struct Node** adjLists;
};

// Function to create a new node
struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with given number of vertices
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));

    for (int i = 0; i < vertices; i++)
        graph->adjLists[i] = NULL;

    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

// Function to perform topological sorting using Depth First Search (DFS)
void topologicalSortUtil(int v, struct Graph* graph, int visited[], int stack[]) {
    visited[v] = 1;

    struct Node* temp = graph->adjLists[v];
    while (temp) {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex])
            topologicalSortUtil(adjVertex, graph, visited, stack);
        temp = temp->next;
    }

    // Push current vertex to stack which stores the result
    stack[--stack[0]] = v;
}

// Function to perform topological sorting of a DAG
void topologicalSort(struct Graph* graph) {
    int visited[MAX_VERTICES];
    int stack[MAX_VERTICES];
    stack[0] = graph->numVertices; // Index 0 is used as a pointer to the top of the stack

    for (int i = 0; i < graph->numVertices; i++)
        visited[i] = 0;

    for (int i = 0; i < graph->numVertices; i++)
        if (!visited[i])
            topologicalSortUtil(i, graph, visited, stack);

    // Print contents of stack
    printf("Topological Sort: ");
    for (int i = 1; i <= graph->numVertices; i++)
        printf("%d ", stack[i]);
    printf("\n");
}

int main() {
    int numVertices = 6;
    struct Graph* graph = createGraph(numVertices);
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);

    topologicalSort(graph);

    return 0;
}
